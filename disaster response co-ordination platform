// --- SETUP ---
// app.js (Express backend entry point)
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const { Server } = require('socket.io');
const io = new Server(http);
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
dotenv.config();

const disasterRoutes = require('./routes/disasters');
const geocodeRoute = require('./routes/geocode');
const verifyImageRoute = require('./routes/verifyImage');
const socialMediaRoute = require('./routes/socialMedia');
const updatesRoute = require('./routes/updates');
const resourcesRoute = require('./routes/resources');

app.use(cors());
app.use(bodyParser.json());

app.use('/disasters', disasterRoutes(io));
app.use('/geocode', geocodeRoute);
app.use('/disasters/:id/verify-image', verifyImageRoute);
app.use('/disasters/:id/social-media', socialMediaRoute(io));
app.use('/disasters/:id/official-updates', updatesRoute);
app.use('/disasters/:id/resources', resourcesRoute(io));

http.listen(3001, () => console.log('Server running on http://localhost:3001'));

// --- Supabase Client ---
// supabase.js
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
module.exports = supabase;

// --- Disaster CRUD Routes ---
// routes/disasters.js
const express = require('express');
const supabase = require('../supabase');
module.exports = (io) => {
  const router = express.Router();

  router.post('/', async (req, res) => {
    const { title, location_name, description, tags, owner_id } = req.body;
    const { data, error } = await supabase.from('disasters').insert([{ title, location_name, description, tags, owner_id }]).select();
    if (error) return res.status(500).json({ error });
    io.emit('disaster_updated', data);
    res.json(data);
  });

  router.get('/', async (req, res) => {
    const { tag } = req.query;
    const query = supabase.from('disasters').select('*');
    if (tag) query.contains('tags', [tag]);
    const { data, error } = await query;
    if (error) return res.status(500).json({ error });
    res.json(data);
  });

  router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const update = req.body;
    const { data, error } = await supabase.from('disasters').update(update).eq('id', id).select();
    if (error) return res.status(500).json({ error });
    io.emit('disaster_updated', data);
    res.json(data);
  });

  router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    const { error } = await supabase.from('disasters').delete().eq('id', id);
    if (error) return res.status(500).json({ error });
    io.emit('disaster_updated', { deleted: id });
    res.json({ success: true });
  });

  return router;
};

// --- Geocode Route ---
// routes/geocode.js
const express = require('express');
const axios = require('axios');
const router = express.Router();

router.post('/', async (req, res) => {
  const { description } = req.body;
  try {
    const geminiResp = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {
      contents: [{ parts: [{ text: `Extract location from: ${description}` }] }]
    }, {
      params: { key: process.env.GEMINI_API_KEY }
    });

    const locationName = geminiResp.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Unknown';

    const mapResp = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
      params: { address: locationName, key: process.env.GOOGLE_MAPS_API_KEY }
    });

    const { lat, lng } = mapResp.data.results[0]?.geometry?.location || {};

    res.json({ location_name: locationName, lat, lng });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
